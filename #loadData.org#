* Initialize languages
#+source: configuration
#+begin_src emacs-lisp :results output
;; Doesn't work
 ;; first it is necessary to ensure that Org-mode loads support for the
  ;; languages used by code blocks in this article
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (ditaa      . t)     
     (dot        . t)
     (emacs-lisp . t)
     (haskell    . t)
     (org        . t)
     (perl       . t)
     (python     . t)
     (R          . t)
     (ruby       . t)
     (sh         . t)
     (sqlite     . t)))
  ;; then we'll remove the need to confirm evaluation of each code
  ;; block, NOTE: if you are concerned about execution of malicious code
  ;; through code blocks, then comment out the following line
  (setq org-confirm-babel-evaluate nil)
  ;; finally we'll customize the default behavior of Org-mode code blocks
  ;; so that they can be used to display examples of Org-mode syntax
  (setf org-babel-default-header-args:org '((:exports . "code")))
#+end_src

#+RESULTS:

#+name: square
#+header: :var x=5
#+begin_src python
return x*x
#+end_src

* Manage R data frame

#+name: load_var
#+BEGIN_SRC R :file check_load.txt :results output :export both :session nyc
  library(foreign)
  df <- read.spss(file = "/home/evan/Documents/city_council/data20140702/City Council (ALL).sav",to.data.frame = TRUE)
  head(df)

rawLabels <- colnames(df)

varNames <- c("DateCollected",
              "DateSent",                                         
              "iPad",                                              
#              "ScannedCoupon",
              "AgeQualified",
              "GeoQualified",
              "Consented",                          
              "HelpedNeighbor",    
              "Other1",                                             
              "HelpedByNeighbor")

varNames <- c(varNames,
              "Other2",
              "lastNeighborConflictTime",
              "Other3",
              "EverShotAt",
              "ShotAtCount",
              "EverStabbed",
              "StabbedCount",
              "NeighbSpokenWCount",
              "GunsSeenCount",
              "HeardPersonThreatenedWGunHereL12Count",
              "HeardGunshotsHereL12Count")

varDf <- data.frame(matrix(c(rawLabels[1:length(varNames)],varNames),byrow = F,ncol=2))
(varDf)
#write.table(varDf,file = "varCheck.csv",sep = ",")

varNames <- c(varNames,
              "SQF12mo",
              "RClubStepIn",
              "RGirlsNewG",
              "RFightPartyNotHere",
              "RBumpSwingNotHere",
              "RJordans",
              "RFriendAttacked",
              "ROwedMoneyPlayed",
              "RexGirlPlayed")
varDf <- data.frame(matrix(c(rawLabels[1:length(varNames)],varNames),byrow = F,ncol=2))
#write.table(varDf,file = "varCheck.csv",sep = ",")


varNames <- c(varNames,
              "RSocialMedia",
              "RBasketball",
              "RGirlClaim",
              "RPublicDis",
              "RStolenJacketPublic",
              "RMoneyOwed",
              "RBetWelch",
              "RBodegaCheat",
              "RBrothersAttacker",
              "AgeAtDeath",
              "RKnowReffer")

varDf <- data.frame(matrix(c(rawLabels[1:length(varNames)],varNames),byrow = F,ncol=2))
#write.table(varDf,file = "varCheck.csv",sep = ",")
#(varDf)

  varNames <- c(varNames,
                "FexGirlPlayed",
                "FPublicDis",              
                "FBetWelch",
                "FFightPartyNotHere",
                "FBrothersAttacker",
                "FGirlClaim",
                "FGirlsNewG",
                "FBumpSwingNotHere",
                "FStolenJacketPublic",              
                "FBasketball")

  varDf <- data.frame(matrix(c(rawLabels[1:length(varNames)],varNames),byrow = F,ncol=2))
  # write.table(varDf,file = "varCheck.csv",sep = ",")

  varNames <- c(varNames,
                "FBodegaCheat",
                "FFriendAttacked",
                "FMoneyOwed",
                "FClubStepIn",
                "FJordans",
                "FSocialMedia",
                "FOwedMoneyPlayed")

  varDf <- data.frame(matrix(c(rawLabels[1:length(varNames)],varNames),byrow = F,ncol=2))
  #write.table(varDf,file = "varCheck.csv",sep = ",")
  (varDf)
                                          #Check Feels safe
  varNames <- c(varNames,
                "FAgeAtDeath",
                "countOnPolice",
                "countOnFire",
                "countOnAmbulance",
                "countOnLeaders",
                "countOnPrograms",
                "countOnTeachers",
                "GangCommon",
                "reportPolice",
                "RFeelSafeNight",
                "RFeelSafeDay",
                "FFeelSafeNight",
                "FFeelSafeDay",
                "SocialMediaUsed")
  varDf <- data.frame(matrix(c(rawLabels[1:length(varNames)],varNames),byrow = F,ncol=2))
  #write.table(varDf,file = "varCheck.csv",sep = ",")

  varNames <- c(varNames,
                "ThreatenedFacebook",
                "ThreatenedTwitter",
                "ThreatenedInstagram",                                   
                "ThreatenedSnapchat",                                   
                "ThreatenedYoutube",                                    
                "ThreatenedVine",                                       
                "ThreatenedOtherSmedia",                      
                "AttendAVrallyL12mo")

  varDf <- data.frame(matrix(c(rawLabels[1:length(varNames)],varNames),byrow = F,ncol=2))

  (varDf)

      imagesResp <- paste("Image",1:5,sep = "")
      imageCount <- paste("SeenImage",1:5,"count",sep = "")
      persImgCt <- 8
      personRespA <- paste("RknowsP",1:persImgCt,sep = "")
      personCommA <- paste("RcommP",1:persImgCt,"L12mo",sep = "")

      personRespH <- paste("RknowsP",1:persImgCt,sep = "")
      personCommH <- paste("RcommP",1:persImgCt,"L12mo",sep = "")

      imageM <- matrix(c(imagesResp,imageCount),byrow = F,ncol=2)
      imageM <-matrix(matrix(imageM,byrow = TRUE,nrow=2),ncol= 1)
      respMH <- matrix(c(personRespH,personCommH),byrow = F,ncol=2)
      respMH <- matrix(matrix(respMH,byrow = TRUE,nrow=2),ncol= 1)


      persImgCt <- 8
      personRespE <- paste("RknowsP",1:persImgCt,sep = "")
      personCommE <- paste("RcommP",1:persImgCt,"L12mo",sep = "")

      imageM <- matrix(c(imagesResp,imageCount),byrow = F,ncol=2)
      imageM <- matrix(matrix(imageM,byrow = TRUE,nrow=2),ncol= 1)
      respME <- matrix(c(personRespE,personCommE),byrow = F,ncol=2)
      respME <- matrix(matrix(respME,byrow = TRUE,nrow=2),ncol= 1)

    imageM <- matrix(c(imagesResp,imageCount),byrow = F,ncol=2)
    imageM <- matrix(matrix(imageM,byrow = TRUE,nrow=2),ncol= 1)
    respMA <- matrix(c(personRespA,personCommA),byrow = F,ncol=2)
    respMA <- matrix(matrix(respMA,byrow = TRUE,nrow=2),ncol= 1)
      


      varNamesA <- c(varNames,imageM,respMA)

      varNames <- c(varNamesA,
                    "age",
                    "EdCompleted",
                    "inSchool",
                    "employed",
                    "TimeOutsideHere",
                    "sleepTime",
                    "rCoup",
                    "Coup1",
                    "Coup2",
                    "Coup3",
                    "Interviewer")


varDf <- data.frame(matrix(c(rawLabels[1:length(varNames)],varNames),byrow = F,ncol=2))


  colnames(df) <- varNames
  write.table(x=df,file="ciyCouncil_all.csv",sep = "\t")
#+END_SRC

#+RESULTS: load_var
[[file:check_load.txt]]

** create location variable
#+name: create_location_variable
#+BEGIN_SRC R  :results value :export both :session nyc 
    library(ascii)
    library(devtools)
    dev_mode(on=T)
    install_github("eusebe/ascii")
    # when finished do:

    #dev_mode(on=F) #and you are back to having stable ggplot2
    DateCollectedShStr <- substr(x=DateCollectedStr,start = 1,stop = 10)
    DateCollectedd <- as.Date(DateCollectedShStr)
    location_data <- rep(-1,length(DateCollectedShStr))

    location_data[DateCollectedd >= as.Date("2014-03-14") & DateCollectedd <= as.Date("2014-03-27")] <- 1
    location_data[DateCollectedd >= as.Date("2014-04-02") & DateCollectedd <= as.Date("2014-04-12")] <- 2
    location_data[DateCollectedd >= as.Date("2014-04-25") & DateCollectedd <= as.Date("2014-05-07")] <- 3
    location_data[DateCollectedd >= as.Date("2014-05-27") & DateCollectedd <= as.Date("2014-06-04")] <- 4

  location <- factor(location_data,levels = 1:4,labels = c("Harlem","EastNY","SJamaica","SBronx"))
  t1 <- "Respondent Neighborhood"
  b <- ascii(table(location),header=T,include.colnames=T,include.rownames=F,caption=t1)
    

#+end_src

#+RESULTS: create_location_variable


#+name: print_location_variable
#+BEGIN_SRC R  :results output org :export both :session nyc 
print(b,type="org")
#+END_SRC

#+RESULTS: print_location_variable
#+BEGIN_SRC org
,#+CAPTION: Respondent Neighborhood
| Harlem | EastNY | SJamaica | SBronx |
|--------+--------+----------+--------|
| 182.00 | 198.00 | 191.00   | 200.00 |
#+END_SRC


* Collective efficacy
** Helped a neighbor
*** code
#+name: helped_neighbor
#+header: :quality 100
#+BEGIN_SRC R :file helped_neighbor.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  HelpedNeighbor <- df[,'HelpedNeighbor']

  HelpedNeighbor_data <- rep(-1,nR)

  HelpedNeighbor_data[is.na(HelpedNeighbor)] <- NA
  HelpedNeighbor_data[as.numeric(HelpedNeighbor)==1] <-NA
  HelpedNeighbor_data[as.numeric(HelpedNeighbor)==2] <-2
  HelpedNeighbor_data[as.numeric(HelpedNeighbor)==3] <- 3
  HelpedNeighbor_data[as.numeric(HelpedNeighbor)==4] <- 4

  HelpedNeighbor_data[as.numeric(HelpedNeighbor)==5] <- NA
  HelpedNeighbor_data[as.numeric(HelpedNeighbor)==6] <- NA
  HelpedNeighbor_data[as.numeric(HelpedNeighbor)==7] <- NA
  HelpedNeighbor_data[as.numeric(HelpedNeighbor)==8] <- 1

    HelpedNeighborf <- factor(HelpedNeighbor_data,levels = 1:4,
                           labels=c("last-wk","last-month",
                               "last-year","never"), ordered=TRUE)



  HelpedNeighborTtl <- table(HelpedNeighborf)
  HelpedNeighborPct <- round(100*prop.table(HelpedNeighborTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(HelpedNeighborPct, main="Percent helped a neighbor in the last 12 months",col = "steel blue")

  #dev.off()
#+end_src

#+name: print_helped_neigbor
#+BEGIN_SRC R  :results output org :export both :session nyc 
  t1 <- "Helped a neighbor"
  b <- ascii(HelpedNeighborPct,header=T,include.colnames=T,include.rownames=F,caption=t1)
  print(b,type="org")
#+END_SRC

#+RESULTS: print_helped_neigbor
#+BEGIN_SRC org
d> #+CAPTION: Helped a neighbor
| last-wk | last-month | last-year | never |
|---------+------------+-----------+-------|
| 75.00   | 16.00      | 7.00      | 3.00  |
#+END_SRC


#+name: print_helped_neigbor_by_neighborhood
#+BEGIN_SRC R  :results output org :export both :session nyc 
  HelpedNeighborNeighbTtl <- table(location,HelpedNeighborf)
  HelpedNeighborNeighbPct <- round(100*prop.table(HelpedNeighborNeighbTtl,1),0)
  t1 <- "Helped a neighbor"
  b <- ascii(HelpedNeighborNeighbPct,header=T,include.colnames=T,include.rownames=T,caption=t1)
  print(b,type="org")
#+END_SRC

#+RESULTS: print_helped_neigbor_by_neighborhood
#+BEGIN_SRC org
d> d> d> #+CAPTION: Helped a neighbor
|            |          | *HelpedNeighborf* |            |           |       |
|            |          | last-wk           | last-month | last-year | never |
|------------+----------+-------------------+------------+-----------|-------|
| *location* | Harlem   | 83.00             | 12.00      | 3.00      | 2.00  |
|            | EastNY   | 72.00             | 19.00      | 6.00      | 3.00  |
|            | SJamaica | 71.00             | 20.00      | 8.00      | 1.00  |
|            | SBronx   | 75.00             | 12.00      | 9.00      | 4.00  |
#+END_SRC


*** graph
#+RESULTS: helped_neighbor
[[file:helped_neighbor.jpeg]]


** Helped by a neighbor
*** code
#+name: helped_by_neighbor
#+header: :quality 100
#+BEGIN_SRC R :file helped_by_neighbor.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  HelpedByNeighbor <- df[,'HelpedByNeighbor']

  HelpedByNeighbor_data <- rep(-1,nR)

  HelpedByNeighbor_data[is.na(HelpedByNeighbor)] <- NA
  HelpedByNeighbor_data[as.numeric(HelpedByNeighbor)==1] <-NA
  HelpedByNeighbor_data[as.numeric(HelpedByNeighbor)==2] <-2
  HelpedByNeighbor_data[as.numeric(HelpedByNeighbor)==3] <- 3
  HelpedByNeighbor_data[as.numeric(HelpedByNeighbor)==4] <- 4

  HelpedByNeighbor_data[as.numeric(HelpedByNeighbor)==5] <- NA
  HelpedByNeighbor_data[as.numeric(HelpedByNeighbor)==6] <- NA
  HelpedByNeighbor_data[as.numeric(HelpedByNeighbor)==7] <- NA
  HelpedByNeighbor_data[as.numeric(HelpedByNeighbor)==8] <- 1

  HelpedByNeighborf <- factor(HelpedByNeighbor_data,levels = 1:4,
                           labels=c("last-wk","last-month",
                               "last-year","never"), ordered=TRUE)


  HelpedByNeighborTtl <- table(HelpedByNeighborf)
  HelpedByNeighborPct <- round(100*prop.table(HelpedByNeighborTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(HelpedByNeighborPct, main="Percent helped a neighbor in the last 12 months",col = "steel blue")

  #dev.off()
#+end_#+begin_src language
    
#+end_src

*** graph
#+RESULTS: helped_by_neighbor
[[file:helped_by_neighbor.jpeg]]

** Time since neighbor conflict
*** code
#+name: conflict_with_neighbor
#+header: :quality 100
#+BEGIN_SRC R :file conflict_with_neighbor.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  lastNeighborConflictTime <- df[,'lastNeighborConflictTime']

  lastNeighborConflictTime_data <- rep(-1,nR)

  lastNeighborConflictTime_data[is.na(lastNeighborConflictTime)] <- NA
  lastNeighborConflictTime_data[as.numeric(lastNeighborConflictTime)==1] <-NA
  lastNeighborConflictTime_data[as.numeric(lastNeighborConflictTime)==2] <-3
  lastNeighborConflictTime_data[as.numeric(lastNeighborConflictTime)==3] <- 2
  lastNeighborConflictTime_data[as.numeric(lastNeighborConflictTime)==4] <- 1

  lastNeighborConflictTime_data[as.numeric(lastNeighborConflictTime)==5] <- NA
  lastNeighborConflictTime_data[as.numeric(lastNeighborConflictTime)==6] <- NA
  lastNeighborConflictTime_data[as.numeric(lastNeighborConflictTime)==7] <- NA
  lastNeighborConflictTime_data[as.numeric(lastNeighborConflictTime)==8] <- 4

  lastNeighborConflictTimef <- factor(lastNeighborConflictTime_data,levels = 1:4,
                           labels=c("never","last-year",
                               "last-month","last-wk"), ordered=TRUE)


  lastNeighborConflictTimeTtl <- table(lastNeighborConflictTimef)
  lastNeighborConflictTimePct <- round(100*prop.table(lastNeighborConflictTimeTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(lastNeighborConflictTimePct, main="Percent had a neighbor conflict in the last 12 months",col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: conflict_with_neighbor
[[file:conflict_with_neighbor.jpeg]]

** Grouped Efficacy
#+name: efficacy_group
#+header: :quality 100
#+BEGIN_SRC R :file efficacy_group.jpeg :results graphics :export both :session nyc 

    efficacy_components <- c(
    "Helped a neighbor","Helped by a neighbor",
"Conflict with a neighbor (reversed)")

    ctdata <- matrix(c(HelpedNeighborPct,
                     HelpedByNeighborPct,
                     lastNeighborConflictTimePct),byrow=TRUE,nrow=3)
    colnames(ctdata)<-names(HelpedNeighborPct)
    row.names(ctdata)<-efficacy_components
    #pdf("grouped_scenario/civilTrust.pdf")
    #jpeg("grouped_scenario/civilTrust.jpg")
    city_col <- c("darkblue",
                    "steelblue",
                    "red")


  ctdataPct <- round(100*prop.table(as.table(ctdata),1),0)
    barplot(ctdataPct,
            main=paste("Construct of efficacy"),
            col=city_col,
            beside = TRUE)
    legend(x="top",legend = efficacy_components, fill = city_col,cex = 1.0)

    #dev.off()
#+END_SRC
*** graph
#+RESULTS: efficacy_group
[[file:efficacy_group.jpeg]]

* Civil trust
** Police Trust
*** code
#+name: police_trust
#+header: :quality 100
#+BEGIN_SRC R :file ct_on_police.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  countOnPolice <- df[,'countOnPolice']
  ctOnPolice=rep(-1,nR)


  ctOnPolice[is.na(countOnPolice)] <- NA
  ctOnPolice[as.numeric(countOnPolice)==1] <- 5
  ctOnPolice[as.numeric(countOnPolice)==2] <- 4            
  ctOnPolice[as.numeric(countOnPolice)==3] <- 3
  ctOnPolice[as.numeric(countOnPolice)==4] <- 1
  ctOnPolice[as.numeric(countOnPolice)==5] <- 2

  ctOnPolice <- factor(ctOnPolice,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

  #jpeg("resp_marginals/ctOnPol.jpg")
  pcounts <- table(ctOnPolice)
  barplot(pcounts, main="Count On Police",col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: police_trust
[[file:ct_on_police.jpeg]]

** Fire Trust
*** code
#+name: fire_trust
#+header: :quality 100
#+BEGIN_SRC R :file ct_on_fire.jpeg :results graphics :export both :session nyc 

  #fire
  countOnFire <- df[,'countOnFire']
  ctOnFire=rep(-1,nR)
  ctOnFire[is.na(countOnFire)==1] <- NA
  ctOnFire[as.numeric(countOnFire)==1] <- 5
  ctOnFire[as.numeric(countOnFire)==2] <- 4          
  ctOnFire[as.numeric(countOnFire)==3] <- 3
  ctOnFire[as.numeric(countOnFire)==4] <- 1
  ctOnFire[as.numeric(countOnFire)==5] <- 2

  ctOnFire <- factor(ctOnFire,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

  #jpeg("resp_marginals/ctOnFire.jpg")
  fcounts <- table(ctOnFire)
  barplot(fcounts, main="Count On Fire",col = "steel blue")

  #dev.off()
#+END_SRC
*** graph
#+RESULTS: fire_trust
[[file:ct_on_fire.jpeg]]

** Ambulance Trust
*** code
#+name: ems_trust
#+header: :quality 100
#+BEGIN_SRC R :file ct_on_ems.jpeg :results graphics :export both :session nyc 


#Ambulance
  countOnAmbulance <- df[,'countOnAmbulance']
  ctOnAmbulance=rep(-1,nR)

  ctOnAmbulance[is.na(countOnAmbulance)==1] <- NA
  ctOnAmbulance[as.numeric(countOnAmbulance)==1] <- 5
  ctOnAmbulance[as.numeric(countOnAmbulance)==2] <- 4
  ctOnAmbulance[as.numeric(countOnAmbulance)==3] <- 3
  ctOnAmbulance[as.numeric(countOnAmbulance)==4] <- 1
  ctOnAmbulance[as.numeric(countOnAmbulance)==5] <- 2

  ctOnAmbulance <- factor(ctOnAmbulance,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

#  jpeg("resp_marginals/ctOnAmbulance.jpg")
  acounts <- table(ctOnAmbulance)
  barplot(acounts, main="Count On Ambulance",col="steel blue")

#  dev.off()
#+END_SRC
*** graph
#+RESULTS: ems_trust
[[file:ct_on_ems.jpeg]]

#+name: pol_trust
#+header: :quality 100
#+BEGIN_SRC R :file ct_on_pol.jpeg :results graphics :export both :session nyc 
** Leaders Trust
*** code
  #Leaders
  countOnLeaders <- df[,'countOnLeaders']
  ctOnLeaders=rep(-1,nR)

  ctOnLeaders[is.na(countOnLeaders)] <- NA
  ctOnLeaders[as.numeric(countOnLeaders)== 1] <- 5
  ctOnLeaders[as.numeric(countOnLeaders)== 2] <- 4            
  ctOnLeaders[as.numeric(countOnLeaders)== 3] <- 3
  ctOnLeaders[as.numeric(countOnLeaders)== 4] <- 1
  ctOnLeaders[as.numeric(countOnLeaders)== 5] <- 2

  ctOnLeaders <- factor(ctOnLeaders,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

#  jpeg("resp_marginals/ctOnLeaders.jpg")
  lcounts <- table(ctOnLeaders)
  barplot(lcounts, main="Count On Leaders",col= "steel blue")

#  dev.off()

#+END_SRC
*** graph
#+RESULTS: pol_trust
[[file:ct_on_pol.jpeg]]

** Program trust
*** code

#+name: cbo_trust
#+header: :quality 100
#+BEGIN_SRC R :file ct_on_cbo.jpeg :results graphics :export both :session nyc 

#Programs
countOnPrograms <- df[,'countOnPrograms']
ctOnPrograms=rep(-1,nR)


  ctOnPrograms[is.na(countOnPrograms)] <- NA
  ctOnPrograms[as.numeric(countOnPrograms)== 1] <- 5
  ctOnPrograms[as.numeric(countOnPrograms)== 2] <- 4            
  ctOnPrograms[as.numeric(countOnPrograms)== 3] <- 3
  ctOnPrograms[as.numeric(countOnPrograms)== 4] <- 1
  ctOnPrograms[as.numeric(countOnPrograms)== 5] <- 2

  ctOnPrograms <- factor(ctOnPrograms,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

#  jpeg("resp_marginals/ctOnPrograms.jpg")
  cbocounts <- table(ctOnPrograms)
  barplot(cbocounts, main="Count On Programs",col= "steel blue")

#  dev.off()
#+END_SRC
*** graph
#+RESULTS: cbo_trust
[[file:ct_on_cbo.jpeg]]

** Teacher trust
*** code
#+name: teacher_trust
#+header: :quality 100
#+BEGIN_SRC R :file ct_on_teacher.jpeg :results graphics :export both :session nyc 

#Teachers
countOnTeachers <- df[,'countOnTeachers']
ctOnTeachers=rep(-1,nR)


  ctOnTeachers[is.na(countOnTeachers)] <- NA
  ctOnTeachers[as.numeric(countOnTeachers)== 1] <- 5
  ctOnTeachers[as.numeric(countOnTeachers)== 2] <- 4            
  ctOnTeachers[as.numeric(countOnTeachers)== 3] <- 3
  ctOnTeachers[as.numeric(countOnTeachers)== 4] <- 1
  ctOnTeachers[as.numeric(countOnTeachers)== 5] <- 2

  ctOnTeachers <- factor(ctOnTeachers,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

#  jpeg("resp_marginals/ctOnTeachers.jpg")
  tcounts <- table(ctOnTeachers)
  barplot(tcounts, main="Count On Teachers",col= "steel blue")

#  dev.off()
#+END_SRC
*** graph
#+RESULTS: teacher_trust
    [[file:ct_on_teacher.jpeg]]

** Grouped Trust
*** code
#+name: civil_trust
#+header: :quality 100
#+BEGIN_SRC R :file ct_on_civil.jpeg :results graphics :export both :session nyc 

  institutions <- c("Police",
  "Fire","Ambulance","Leaders","Programs","Teachers")

  ctdata <- matrix(c(pcounts,
                   fcounts,
                   acounts,
                   lcounts,
                   cbocounts,
                   tcounts),byrow=TRUE,nrow=6)
  colnames(ctdata)<-names(pcounts)
  row.names(ctdata)<-institutions
  #pdf("grouped_scenario/civilTrust.pdf")
  #jpeg("grouped_scenario/civilTrust.jpg")
  city_col <- c("darkblue",
                  "red",
                  "steelblue",
                  "yellow",
                  "purple",
                  "green"
                  )

  barplot(ctdata,
          main=paste("Trust in civil institutions"),
          col=city_col,
          beside = TRUE)
  legend(x="top",legend = institutions, fill = city_col,cex = 1.0)

  #dev.off()
#+END_SRC
*** graph
#+RESULTS: civil_trust
[[file:ct_on_civil.jpeg]]

** Report crime to police
*** code
#+name: report_crime
#+header: :quality 100
#+BEGIN_SRC R :file report_crime.jpeg :results graphics :export both :session nyc 

#Teachers
reportPolice <- df[,'reportPolice']
ctReportPolice=rep(-1,nR)


  ctReportPolice[is.na(reportPolice)] <- NA
  ctReportPolice[as.numeric(reportPolice)== 1] <- 5
  ctReportPolice[as.numeric(reportPolice)== 2] <- 4            
  ctReportPolice[as.numeric(reportPolice)== 3] <- 3
  ctReportPolice[as.numeric(reportPolice)== 4] <- 1
  ctReportPolice[as.numeric(reportPolice)== 5] <- 2

  ctReportPolice <- factor(ctReportPolice,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

#  jpeg("resp_marginals/ctReportPolice.jpg")
  pctcounts <- round(100*prop.table(table(ctReportPolice)),0)
  barplot(pctcounts, main="Percentage who would report a crime",col= "steel blue")

#  dev.off()
#+END_SRC
*** graph
#+RESULTS: report_crime
[[file:report_crime.jpeg]]

* Victimization
** Respondent has been shot at
*** code
#+name: shot_victim
#+header: :quality 100
#+BEGIN_SRC R :file shot_victim.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  EverShotAt <- df[,'EverShotAt']

  EverShotAtA <- table(EverShotAt,useNA = "ifany")
  EverShotAtPct <- round(100*prop.table(EverShotAtA),0)



  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(EverShotAtPct, main="Percent ever shot at",col = "steel blue")

  #dev.off()

#+end_src
#+name: shot_victim_table
#+header: :quality 100
#+BEGIN_SRC R :results output org :export both :session nyc 
  library(ascii)
  options(asciiType="org")
  c <- "Ever shot at"
  b<-ascii(table(EverShotAt,header=T,
                         include.colnames=T,
                         caption=c))
  print(b,type="org")
#+END_SRC

#+RESULTS: shot_victim_table
#+BEGIN_SRC org
 Error: unexpected ')' in:
"                       include.colnames=T,
                       caption=c))"
|   | EverShotAteader | include.colnames | caption      | Freq |
|---+-----------------+------------------+--------------+------|
| 1 | TRUE            | TRUE             | Ever shot at | 1.00 |
Warning messages:
1: In rep(rownames, length = nrow(x)) :
  'x' is NULL so the result will be NULL
2: In rep(colnames, length = ncol(x)) :
  'x' is NULL so the result will be NULL
#+END_SRC



*** graph
#+RESULTS: shot_victim
[[file:shot_victim.jpeg]]
** Respondent has been stabbed
*** code
#+name: stabbed_victim
#+header: :quality 100
#+BEGIN_SRC R :file stabbed_victim.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  EverStabbed <- df[,'EverStabbed']

  EverStabbedA <- table(EverStabbed,useNA = "ifany")
  EverStabbedPct <- round(100*prop.table(EverStabbedA),0)



  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(EverStabbedPct, main="Percent ever stabbed",col = "steel blue")

  #dev.off()
#+end_src
*** graphs
#+RESULTS: stabbed_victim
[[file:stabbed_victim.jpeg]]
** Number of guns the respondent has seen
*** code
#+name: guns_seen
#+header: :quality 100
#+BEGIN_SRC R :file guns_seen.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  GunsSeenCount <- df[,'GunsSeenCount']

  GunsSeenCount_data <- rep(-1,nR)

  GunsSeenCount_data[is.na(GunsSeenCount)] <- NA
  GunsSeenCount_data[as.numeric(GunsSeenCount)==1] <-1
  GunsSeenCount_data[as.numeric(GunsSeenCount)==2] <-2
  GunsSeenCount_data[as.numeric(GunsSeenCount)==3] <- 11     
  GunsSeenCount_data[as.numeric(GunsSeenCount)==4] <- 3

  GunsSeenCount_data[as.numeric(GunsSeenCount)==5] <- 4
  GunsSeenCount_data[as.numeric(GunsSeenCount)==6] <- 5    
  GunsSeenCount_data[as.numeric(GunsSeenCount)==7] <- 6
  GunsSeenCount_data[as.numeric(GunsSeenCount)==8] <- 7

  GunsSeenCount_data[as.numeric(GunsSeenCount)==9] <- 8
  GunsSeenCount_data[as.numeric(GunsSeenCount)==10] <- 9
  GunsSeenCount_data[as.numeric(GunsSeenCount)==11] <- 10
  GunsSeenCount_data[as.numeric(GunsSeenCount)==12] <- 12        


  GunsSeenCountf <- factor(GunsSeenCount_data,levels = 1:12,
                           labels=c(0:9,"10+","Decline"), ordered=TRUE)


  GunsSeenCountTtl <- table(GunsSeenCountf)
  GunsSeenCountPct <- round(100*prop.table(GunsSeenCountTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(GunsSeenCountPct, main="Percent seen gun count",col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: guns_seen
[[file:guns_seen.jpeg]]

** Repondent is aware of recent gun threats
*** code
#+name: threats_heard
#+header: :quality 100
#+BEGIN_SRC R :file threats_heard.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  HeardPersonThreatenedWGunHereL12Count <- df[,'HeardPersonThreatenedWGunHereL12Count']

  HeardPersonThreatenedWGunHereL12Count_data <- rep(-1,nR)

  HeardPersonThreatenedWGunHereL12Count_data[is.na(HeardPersonThreatenedWGunHereL12Count)] <- NA
  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==1] <-1
  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==2] <-2
  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==3] <- 11     
  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==4] <- 3

  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==5] <- 4
  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==6] <- 5    
  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==7] <- 6
  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==8] <- 7

  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==9] <- 8
  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==10] <- 9
  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==11] <- 10
  HeardPersonThreatenedWGunHereL12Count_data[as.numeric(HeardPersonThreatenedWGunHereL12Count)==12] <- 12        


  HeardPersonThreatenedWGunHereL12Countf <- factor(HeardPersonThreatenedWGunHereL12Count_data,levels = 1:12,
                           labels=c(0:9,"10+","Decline"), ordered=TRUE)


  HeardPersonThreatenedWGunHereL12CountTtl <- table(HeardPersonThreatenedWGunHereL12Countf)
  HeardPersonThreatenedWGunHereL12CountPct <- round(100*prop.table(HeardPersonThreatenedWGunHereL12CountTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(HeardPersonThreatenedWGunHereL12CountPct, main="Percent heard gun threats here in the last 12 months",col = "steel blue")

  #dev.off()
#+end_src

*** graphs
#+Results: threats_heard
[[file:threats_heard.jpeg]]

** Respondent has heard recent gun shots
*** code
#+name: shots_heard
#+header: :quality 100
#+BEGIN_SRC R :file shots_heard.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  HeardGunshotsHereL12Count <- df[,'HeardGunshotsHereL12Count']

  HeardGunshotsHereL12Count_data <- rep(-1,nR)

  HeardGunshotsHereL12Count_data[is.na(HeardGunshotsHereL12Count)] <- NA
  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==1] <-1
  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==2] <-2
  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==3] <- 11     
  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==4] <- 3

  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==5] <- 4
  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==6] <- 5    
  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==7] <- 6
  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==8] <- 7

  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==9] <- 8
  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==10] <- 9
  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==11] <- 10
  HeardGunshotsHereL12Count_data[as.numeric(HeardGunshotsHereL12Count)==12] <- 12        


  HeardGunshotsHereL12Countf <- factor(HeardGunshotsHereL12Count_data,levels = 1:12,
                           labels=c(0:9,"10+","Decline"), ordered=TRUE)


  HeardGunshotsHereL12CountTtl <- table(HeardGunshotsHereL12Countf)
  HeardGunshotsHereL12CountPct <- round(100*prop.table(HeardGunshotsHereL12CountTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(HeardGunshotsHereL12CountPct, main="Percent heard gun shots here in the last 12 months",col = "steel blue")

  #dev.off()
#+end_src
*** graphs
#+RESULTS: shots_heard
[[file:shots_heard.jpeg]]
    
** Respondent has been recently stopped by police 
*** code
#+name: sqf
#+header: :quality 100
#+BEGIN_SRC R :file sqf.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  SQFCount <- df[,'SQF12mo']

  SQFCount_data <- rep(-1,nR)

  SQFCount_data[is.na(SQFCount)] <- NA
  SQFCount_data[as.numeric(SQFCount)==1] <-1
  SQFCount_data[as.numeric(SQFCount)==2] <-2
  SQFCount_data[as.numeric(SQFCount)==3] <- 11     
  SQFCount_data[as.numeric(SQFCount)==4] <- 3

  SQFCount_data[as.numeric(SQFCount)==5] <- 4
  SQFCount_data[as.numeric(SQFCount)==6] <- 5    
  SQFCount_data[as.numeric(SQFCount)==7] <- 6
  SQFCount_data[as.numeric(SQFCount)==8] <- 7

  SQFCount_data[as.numeric(SQFCount)==9] <- 8
  SQFCount_data[as.numeric(SQFCount)==10] <- 9
  SQFCount_data[as.numeric(SQFCount)==11] <- 10
  SQFCount_data[as.numeric(SQFCount)==12] <- 12        


  SQFCountf <- factor(SQFCount_data,levels = 1:12,
                           labels=c(0:9,"10+","Dec"), ordered=TRUE)


  SQFCountTtl <- table(SQFCountf)
  SQFCountPct <- round(100*prop.table(SQFCountTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(SQFCountPct, main="Percent subject to Stop, Question and Frisk last 12 months",col = "steel blue")

  #dev.off()
#+end_src

*** graphs
#+Results: sqf
[[file:sqf.jpeg]]

** Respondent's estimate of age at death
*** code
#+name: ageAtDeath
#+header: :quality 100
#+BEGIN_SRC R :file ageAtDeath.jpeg :results graphics :export both :session nyc 
    ageAtDeath <- df$AgeAtDeath
    ageAtDeaths <- levels(ageAtDeath)[as.numeric(ageAtDeath)]
    ageAtDeaths <- gsub(" ", "",ageAtDeaths)
    ageAtDeaths[ageAtDeaths==""] <- NA

    ageAtDeathN <- as.numeric(ageAtDeaths)
  hist(ageAtDeathN[!is.na(ageAtDeathN)],freq=FALSE,
       xlab="Age at Death",main="Histogram of Respondent Age At Death")

#+End_src

#+name: ageAtDeathLT35
#+header: :quality 100
#+BEGIN_SRC R :file ageAtDeathLT35.jpeg :results graphics :export both :session nyc 
  ageAtDeathLT35 <- ageAtDeathN
  ageAtDeathLT35[ageAtDeathN<=35] <- "Dead@35"
  ageAtDeathLT35[ageAtDeathN>35] <- "NotDead@35"


  ageAtDeathLT35Ttl <- table(ageAtDeathLT35)
  ageAtDeathLT35Pct <- round(100*prop.table(ageAtDeathLT35Ttl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(ageAtDeathLT35Pct, main="Percent who expect to be dead at 35",col = "steel blue")
#+End_src
*** graphs
#+RESULTS: ageAtDeathLT35
[[file:ageAtDeathLT35.jpeg]]

#+RESULTS: ageAtDeath
[[file:ageAtDeath.jpeg]]
** Respondent's estimate of Referrer's estimate of age at death
*** code

#+name: FAgeAtDeath
#+header: :quality 100
#+BEGIN_SRC R :file FAgeAtDeath.jpeg :results graphics :export both :session nyc 
    FAgeAtDeath <- df$FAgeAtDeath
    FAgeAtDeaths <- levels(FAgeAtDeath)[as.numeric(FAgeAtDeath)]
    FAgeAtDeaths <- gsub(" ", "",FAgeAtDeaths)
    FAgeAtDeaths[FAgeAtDeaths==""] <- NA

    FAgeAtDeathN <- as.numeric(FAgeAtDeaths)
  hist(FAgeAtDeathN[!is.na(FAgeAtDeathN)],freq=FALSE,
       xlab="Age at Death",main="Respondent's esitmate of Refferer's Age At Death")

#+End_src

#+name: FAgeAtDeathLT35
#+header: :quality 100
#+BEGIN_SRC R :file FAgeAtDeathLT35.jpeg :results graphics :export both :session nyc 
  FAgeAtDeathLT35 <- FAgeAtDeathN
  FAgeAtDeathLT35[FAgeAtDeathN<=35] <- "Dead@35"
  FAgeAtDeathLT35[FAgeAtDeathN>35] <- "NotDead@35"


  FAgeAtDeathLT35Ttl <- table(FAgeAtDeathLT35)
  FAgeAtDeathLT35Pct <- round(100*prop.table(FAgeAtDeathLT35Ttl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(FAgeAtDeathLT35Pct, main="Percent who expect their refferer to be dead at 35",col = "steel blue")
#+End_src

*** graphs
* Safety
** Respondent thinks gangs are common
*** code
#+name: gang_common
#+header: :quality 100
#+BEGIN_SRC R :file gang_common.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  GangCommon <- df[,'GangCommon']
  GangCommon_data=rep(-1,nR)

  GangCommon_data[is.na(GangCommon)] <- NA
  GangCommon_data[as.numeric(GangCommon)==1] <- 5
  GangCommon_data[as.numeric(GangCommon)==2] <- 4            
  GangCommon_data[as.numeric(GangCommon)==3] <- 3
  GangCommon_data[as.numeric(GangCommon)==4] <- 1
  GangCommon_data[as.numeric(GangCommon)==5] <- 2

  GangCommon_data <- factor(GangCommon_data,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

  #jpeg("resp_marginals/ctOnPol.jpg")
  gcounts <- table(GangCommon_data)

  GangCommonPct <- round(100*prop.table(gcounts),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(GangCommonPct, main="Percent who say gangs are common",col = "steel blue")
#+End_src
*** graph
#+RESULTS: gang_common
[[file:gang_common.jpeg]]

** Respondent feels safe during the day
*** code
#+name: resp_safe_day
#+header: :quality 100
#+BEGIN_SRC R :file resp_safe_day.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  RFeelSafeDay <- df[,'RFeelSafeDay']
  RFeelSafeDay_data=rep(-1,nR)

  RFeelSafeDay_data[is.na(RFeelSafeDay)] <- NA
  RFeelSafeDay_data[as.numeric(RFeelSafeDay)==1] <- 5
  RFeelSafeDay_data[as.numeric(RFeelSafeDay)==2] <- 4            
  RFeelSafeDay_data[as.numeric(RFeelSafeDay)==3] <- 3
  RFeelSafeDay_data[as.numeric(RFeelSafeDay)==4] <- 1
  RFeelSafeDay_data[as.numeric(RFeelSafeDay)==5] <- 2

  RFeelSafeDay_data <- factor(RFeelSafeDay_data,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

  #jpeg("resp_marginals/ctOnPol.jpg")
  fsdcounts <- table(RFeelSafeDay_data)

  RFeelSafeDayPct <- round(100*prop.table(fsdcounts),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(RFeelSafeDayPct, main="Percent who feel safe (day)",col = "steel blue")
#+End_src
*** graph
#+RESULTS: resp_safe_day
[[file:resp_safe_day.jpeg]]

** Respondent feels safe at night
*** code
#+name: resp_safe_night
#+header: :quality 100
#+BEGIN_SRC R :file resp_safe_night.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  RFeelSafeNight <- df[,'RFeelSafeNight']
  RFeelSafeNight_data=rep(-1,nR)

  RFeelSafeNight_data[is.na(RFeelSafeNight)] <- NA
  RFeelSafeNight_data[as.numeric(RFeelSafeNight)==1] <- 5
  RFeelSafeNight_data[as.numeric(RFeelSafeNight)==2] <- 4            
  RFeelSafeNight_data[as.numeric(RFeelSafeNight)==3] <- 3
  RFeelSafeNight_data[as.numeric(RFeelSafeNight)==4] <- 1
  RFeelSafeNight_data[as.numeric(RFeelSafeNight)==5] <- 2

  RFeelSafeNight_data <- factor(RFeelSafeNight_data,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

  #jpeg("resp_marginals/ctOnPol.jpg")
  fsncounts <- table(RFeelSafeNight_data)

  RFeelSafeNightPct <- round(100*prop.table(fsncounts),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(RFeelSafeNightPct, main="Percent who feel safe (night)",col = "steel blue")
#+End_src
*** graph
#+RESULTS: resp_safe_night
[[file:resp_safe_night.jpeg]]

** Respondent thinks friend feels safe during the day
*** code
#+name: friend_safe_day
#+header: :quality 100
#+BEGIN_SRC R :file friend_safe_day.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  FFeelSafeDay <- df[,'FFeelSafeDay']
  FFeelSafeDay_data=rep(-1,nR)

  FFeelSafeDay_data[is.na(FFeelSafeDay)] <- NA
  FFeelSafeDay_data[as.numeric(FFeelSafeDay)==1] <- 5
  FFeelSafeDay_data[as.numeric(FFeelSafeDay)==2] <- 4            
  FFeelSafeDay_data[as.numeric(FFeelSafeDay)==3] <- 3
  FFeelSafeDay_data[as.numeric(FFeelSafeDay)==4] <- 1
  FFeelSafeDay_data[as.numeric(FFeelSafeDay)==5] <- 2

  FFeelSafeDay_data <- factor(FFeelSafeDay_data,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

  #jpeg("resp_marginals/ctOnPol.jpg")
  ffsdcounts <- table(FFeelSafeDay_data)

  FFeelSafeDayPct <- round(100*prop.table(ffsdcounts),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(FFeelSafeDayPct, main="Percent who think their Friend feels safe (day)",col = "steel blue")
#+End_src
*** graph
#+RESULTS: friend_safe_day
    [[file:friend_safe_day.jpeg]]
** Respondent thinks friend feels safe at night
*** code
#+name: friend_safe_night
#+header: :quality 100
#+BEGIN_SRC R :file friend_safe_night.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  FFeelSafeNight <- df[,'FFeelSafeNight']
  FFeelSafeNight_data=rep(-1,nR)

  FFeelSafeNight_data[is.na(FFeelSafeNight)] <- NA
  FFeelSafeNight_data[as.numeric(FFeelSafeNight)==1] <- 5
  FFeelSafeNight_data[as.numeric(FFeelSafeNight)==2] <- 4            
  FFeelSafeNight_data[as.numeric(FFeelSafeNight)==3] <- 3
  FFeelSafeNight_data[as.numeric(FFeelSafeNight)==4] <- 1
  FFeelSafeNight_data[as.numeric(FFeelSafeNight)==5] <- 2

  FFeelSafeNight_data <- factor(FFeelSafeNight_data,levels = 1:5,
                       labels = c("Yes-d",
                           "Yes-p",
                           "Unsure",
                           "No-p",
                           "No-d")
                       ,ordered=TRUE)

  #jpeg("resp_marginals/ctOnPol.jpg")
  ffsncounts <- table(FFeelSafeNight_data)

  FFeelSafeNightPct <- round(100*prop.table(ffsncounts),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(FFeelSafeNightPct, main="Percent who think their Friend feels safe (night)",col = "steel blue")
#+End_src
*** graph
#+RESULTS: friend_safe_night
[[file:friend_safe_night.jpeg]]

** Grouped safety
*** code
#+name: safety_group
#+header: :quality 100
#+BEGIN_SRC R :file safety_group.jpeg :results graphics :export both :session nyc 

    safety_components <- c("gang prevelance",
    "Resp Feels Safe (day)","Resp Feels Safe (night)",
  "Friend Feels Safe (day)","Friend Feels Safe (night)")

    ctdata <- matrix(c(fsdcounts,
                     fsncounts,
                     ffsdcounts,
                     ffsncounts,
                     gcounts),byrow=TRUE,nrow=5)
    colnames(ctdata)<-names(fsdcounts)
    row.names(ctdata)<-safety_components
    #pdf("grouped_scenario/civilTrust.pdf")
    #jpeg("grouped_scenario/civilTrust.jpg")
    city_col <- c("darkblue",
                    "red",
                    "steelblue",
                    "yellow",
                    "purple"                    )

  ctdataPct <- round(100*prop.table(as.table(ctdata),1),0)
    barplot(ctdataPct,
            main=paste("Construct of safety"),
            col=city_col,
            beside = TRUE)
    legend(x="top",legend = safety_components, fill = city_col,cex = 1.0)

    #dev.off()
#+END_SRC

#+RESULTS: safety_group
[[file:safety_group.jpeg]]

* Social Media
** Social media used
*** code
#+name: social_media
#+header: :quality 100
#+BEGIN_SRC R :file social_media.jpeg :results graphics :export both :session nyc 
SocialMediaUseds <- levels(df$SocialMediaUsed)[as.numeric(df$SocialMediaUsed)]
uFacebook <- length(grep("Facebook",SocialMediaUseds))
uTwitter <- length(grep("Twitter",SocialMediaUseds))
uInstagram <- length(grep("Instagram",SocialMediaUseds))
uSnapchat <- length(grep("Snapchat",SocialMediaUseds))
uYoutube <- length(grep("Youtube",SocialMediaUseds))
uVine <- length(grep("Vine",SocialMediaUseds))
uOther <- length(grep("Other",SocialMediaUseds))

socialMediaUse<-round(100*c(uFacebook,uTwitter,uInstagram,uSnapchat,
uYoutube,uVine,uOther)/length(SocialMediaUseds),0)
names(socialMediaUse)<-c("fb","Tw","Ig","Sc","Yt","Vn","Other")
barplot(socialMediaUse[order(socialMediaUse,decreasing = TRUE)]
,xlab="media",ylab="% of sample",main="Social media used",col="steel blue")
#+END_SRC
*** graph
#+RESULTS: social_media
[[file:social_media.jpeg]]

** Respondent is aware of people of being threatened on Facebook
*** code
#+name: ThreatenedFacebook
#+header: :quality 100
#+BEGIN_SRC R :file ThreatenedFacebook.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  ThreatenedFacebookCount <- df[,'ThreatenedFacebook']

  ThreatenedFacebookCount_data <- rep(-1,nR)

  ThreatenedFacebookCount_data[is.na(ThreatenedFacebookCount)] <- NA
  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==1] <-NA
  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==2] <- 1
  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==3] <- 2     
  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==4] <- 11

  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==5] <- 3
  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==6] <- 4    
  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==7] <- 5
  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==8] <- 6

  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==9] <- 7
  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==10] <- 8
  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==11] <- 9
  ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==12] <- 10
ThreatenedFacebookCount_data[as.numeric(ThreatenedFacebookCount)==13] <- 12


  ThreatenedFacebookCountf <- factor(ThreatenedFacebookCount_data,levels = 1:12,
                           labels=c(0:9,"10+","Dec"), ordered=TRUE)


  ThreatenedFacebookCountTtl <- table(ThreatenedFacebookCountf)
  ThreatenedFacebookCountPct <- round(100*prop.table(ThreatenedFacebookCountTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(ThreatenedFacebookCountPct, 
main="Percent aware and number of threats on Facebook", 
col = "steel blue")

  #dev.off()
#+end_src
*** graphs
#+RESULTS: ThreatenedFacebook
[[file:ThreatenedFacebook.jpeg]]

** Respondent is aware of people of being threatened on Twitter
*** code
#+name: ThreatenedTwitter
#+header: :quality 100
#+BEGIN_SRC R :file ThreatenedTwitter.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  ThreatenedTwitterCount <- df[,'ThreatenedTwitter']

  ThreatenedTwitterCount_data <- rep(-1,nR)

  ThreatenedTwitterCount_data[is.na(ThreatenedTwitterCount)] <- NA
  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==1] <-NA
  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==2] <- 1
  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==3] <- 2     
  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==4] <- 11

  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==5] <- 3
  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==6] <- 4    
  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==7] <- 5
  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==8] <- 6

  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==9] <- 7
  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==10] <- 8
  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==11] <- 9
  ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==12] <- 10
ThreatenedTwitterCount_data[as.numeric(ThreatenedTwitterCount)==13] <- 12


  ThreatenedTwitterCountf <- factor(ThreatenedTwitterCount_data,levels = 1:12,
                           labels=c(0:9,"10+","Dec"), ordered=TRUE)


  ThreatenedTwitterCountTtl <- table(ThreatenedTwitterCountf)
  ThreatenedTwitterCountPct <- round(100*prop.table(ThreatenedTwitterCountTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(ThreatenedTwitterCountPct, 
main="Percent aware and number of threats on Twitter", 
col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: ThreatenedTwitter
[[file:ThreatenedTwitter.jpeg]]

** Respondent is aware of people of being threatened on Instagram
*** code
#+name: ThreatenedInstagram
#+header: :quality 100
#+BEGIN_SRC R :file ThreatenedInstagram.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  ThreatenedInstagramCount <- df[,'ThreatenedInstagram']

  ThreatenedInstagramCount_data <- rep(-1,nR)

  ThreatenedInstagramCount_data[is.na(ThreatenedInstagramCount)] <- NA
  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==1] <-NA
  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==2] <- 1
  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==3] <- 2     
  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==4] <- 11

  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==5] <- 3
  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==6] <- 4    
  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==7] <- 5
  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==8] <- 6

  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==9] <- 7
  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==10] <- 8
  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==11] <- 9
  ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==12] <- 10
ThreatenedInstagramCount_data[as.numeric(ThreatenedInstagramCount)==13] <- 12


  ThreatenedInstagramCountf <- factor(ThreatenedInstagramCount_data,levels = 1:12,
                           labels=c(0:9,"10+","Dec"), ordered=TRUE)


  ThreatenedInstagramCountTtl <- table(ThreatenedInstagramCountf)
  ThreatenedInstagramCountPct <- round(100*prop.table(ThreatenedInstagramCountTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(ThreatenedInstagramCountPct, 
main="Percent aware and number of threats on Instagram", 
col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: ThreatenedInstagram
[[file:ThreatenedInstagram.jpeg]]

** Respondent is aware of people of being threatened on Snapchat
*** code
#+name: ThreatenedSnapchat
#+header: :quality 100
#+BEGIN_SRC R :file ThreatenedSnapchat.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  ThreatenedSnapchatCount <- df[,'ThreatenedSnapchat']

  ThreatenedSnapchatCount_data <- rep(-1,nR)

  ThreatenedSnapchatCount_data[is.na(ThreatenedSnapchatCount)] <- NA
  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==1] <-NA
  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==2] <- 1
  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==3] <- 2     
  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==4] <- 11

  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==5] <- 3
  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==6] <- 4    
  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==7] <- 5
  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==8] <- 6

  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==9] <- 7
  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==10] <- 8
  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==11] <- 9
  ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==12] <- 10
ThreatenedSnapchatCount_data[as.numeric(ThreatenedSnapchatCount)==13] <- 12


  ThreatenedSnapchatCountf <- factor(ThreatenedSnapchatCount_data,levels = 1:12,
                           labels=c(0:9,"10+","Dec"), ordered=TRUE)


  ThreatenedSnapchatCountTtl <- table(ThreatenedSnapchatCountf)
  ThreatenedSnapchatCountPct <- round(100*prop.table(ThreatenedSnapchatCountTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(ThreatenedSnapchatCountPct, 
main="Percent aware and number of threats on Snapchat", 
col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: ThreatenedSnapchat
[[file:ThreatenedSnapchat.jpeg]]

** Respondent is aware of people of being threatened on Youtube
*** code
#+name: ThreatenedYoutube
#+header: :quality 100
#+BEGIN_SRC R :file ThreatenedYoutube.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  ThreatenedYoutubeCount <- df[,'ThreatenedYoutube']

  ThreatenedYoutubeCount_data <- rep(-1,nR)

  ThreatenedYoutubeCount_data[is.na(ThreatenedYoutubeCount)] <- NA
  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==1] <-NA
  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==2] <- 1
  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==3] <- 2     
  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==4] <- 11

  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==5] <- 3
  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==6] <- 4    
  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==7] <- 5
  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==8] <- 6

  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==9] <- 7
  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==10] <- 8
  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==11] <- 9
  ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==12] <- 10
ThreatenedYoutubeCount_data[as.numeric(ThreatenedYoutubeCount)==13] <- 12


  ThreatenedYoutubeCountf <- factor(ThreatenedYoutubeCount_data,levels = 1:12,
                           labels=c(0:9,"10+","Dec"), ordered=TRUE)


  ThreatenedYoutubeCountTtl <- table(ThreatenedYoutubeCountf)
  ThreatenedYoutubeCountPct <- round(100*prop.table(ThreatenedYoutubeCountTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(ThreatenedYoutubeCountPct, 
main="Percent aware and number of threats on Youtube", 
col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: ThreatenedYoutube
[[file:ThreatenedYoutube.jpeg]]
    
** Respondent is aware of people of being threatened on Vine
*** code
#+name: ThreatenedVine
#+header: :quality 100
#+BEGIN_SRC R :file ThreatenedVine.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  ThreatenedVineCount <- df[,'ThreatenedVine']

  ThreatenedVineCount_data <- rep(-1,nR)

  ThreatenedVineCount_data[is.na(ThreatenedVineCount)] <- NA
  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==1] <-NA
  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==2] <- 1
  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==3] <- 2     
  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==4] <- 11

  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==5] <- 3
  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==6] <- 4    
  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==7] <- 5
  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==8] <- 6

  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==9] <- 7
  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==10] <- 8
  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==11] <- 9
  ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==12] <- 10
ThreatenedVineCount_data[as.numeric(ThreatenedVineCount)==13] <- 12


  ThreatenedVineCountf <- factor(ThreatenedVineCount_data,levels = 1:12,
                           labels=c(0:9,"10+","Dec"), ordered=TRUE)


  ThreatenedVineCountTtl <- table(ThreatenedVineCountf)
  ThreatenedVineCountPct <- round(100*prop.table(ThreatenedVineCountTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(ThreatenedVineCountPct, 
main="Percent aware and number of threats on Vine", 
col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: ThreatenedVine
[[file:ThreatenedVine.jpeg]]

** Respondent is aware of people of being threatened on other social media
*** code
#+name: ThreatenedOther
#+header: :quality 100
#+BEGIN_SRC R :file ThreatenedOther.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  ThreatenedOtherCount <- df[,'ThreatenedOtherSmedia']

  ThreatenedOtherCount_data <- rep(-1,nR)

  ThreatenedOtherCount_data[is.na(ThreatenedOtherCount)] <- NA
  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==1] <-NA
  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==2] <- 1
  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==3] <- 2     
  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==4] <- 11

  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==5] <- 3
  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==6] <- 4    
  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==7] <- 5
  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==8] <- 6

  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==9] <- 7
  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==10] <- 8
  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==11] <- 9
  ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==12] <- 10
ThreatenedOtherCount_data[as.numeric(ThreatenedOtherCount)==13] <- 12


  ThreatenedOtherCountf <- factor(ThreatenedOtherCount_data,levels = 1:12,
                           labels=c(0:9,"10+","Dec"), ordered=TRUE)


  ThreatenedOtherCountTtl <- table(ThreatenedOtherCountf)
  ThreatenedOtherCountPct <- round(100*prop.table(ThreatenedOtherCountTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(ThreatenedOtherCountPct, 
main="Percent aware and number of threats on Other", 
col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: ThreatenedOther
[[file:ThreatenedOther.jpeg]]

* Program awareness
** Anti-violence images
*** code
#+name: seen_any_image
#+header: :quality 100
#+BEGIN_SRC R :file seen_any_image.jpeg :results graphics :export both :session nyc 
  imgIdx <- 80+2*(0:4)

  ## for(i in imgIdx) {
  ##     print(table(as.numeric(df[,i])))
  ##       }

  SeenImage_data <- rep(-1,nrow(df))
  SeenImage1 <- as.numeric(df[,'Image1'])==2
  SeenImage2 <- as.numeric(df[,'Image2'])==2
  SeenImage3 <- as.numeric(df[,'Image3'])==2
  SeenImage4 <- as.numeric(df[,'Image4'])==2
  SeenImage5 <- as.numeric(df[,'Image5'])==2


  SeenImage_data[SeenImage1 | SeenImage2 | SeenImage3 | SeenImage4 | SeenImage5] <- 2
  SeenImage_data[!SeenImage1 & !SeenImage2 & !SeenImage3 & !SeenImage4 & !SeenImage5] <- 1

  SeenAnyImage <- factor(SeenImage_data,levels = 1:2,labels = c("No","Yes"),ordered = TRUE)

  tSeenAnyImage <- round(100*prop.table(table(SeenAnyImage)),0)
  barplot(tSeenAnyImage,main = "Percentage of Respondents that have seen program materials",col="steel blue")
  SeenAnyImage <- factor(SeenImage_data,levels = 1:2,labels = c("No","Yes"),ordered = TRUE)
  tSeenAnyImage <- round(100*prop.table(table(SeenAnyImage)),0)
  t1 <- "Seen any program image"
  b <- ascii(tSeenAnyImage,include.rownames = FALSE,include.colnames = TRUE,caption=t1)
#+END_SRC
#+name: print_seen_any_image
#+BEGIN_SRC R  :results output org :export both :session nyc 
  print(b,type="org")
#+END_SRC

#+RESULTS: print_seen_any_image
#+BEGIN_SRC org
,#+CAPTION: Seen any program image
| No    | Yes   |
|-------+-------|
| 20.00 | 80.00 |
#+END_SRC


#+name: calc_seen_any_image_by_neighborhood
#+BEGIN_SRC R  :results silent :export code :session nyc 
  SeenImageNeighb <- table(location,SeenAnyImage)
  tSeenAnyImageNeighb <- round(100*prop.table(SeenImageNeighb,1),0)
  t1 <- "Seen any image by neighborhood"
  b <- ascii(tSeenAnyImageNeighb,include.rownames = TRUE,include.colnames = TRUE,caption=t1)
#+END_SRC


#+name: print_seen_any_image_by_neighborhood
#+BEGIN_SRC R  :results output org :export both :session nyc 
print(b,type="org")
#+END_SRC

#+RESULTS: print_seen_any_image_by_neighborhood
#+BEGIN_SRC org
,#+CAPTION: Seen any image by neighborhood
|            |          | *SeenAnyImage* |       |
|            |          | No             | Yes   |
|------------+----------+----------------|-------|
| *location* | Harlem   | 20.00          | 80.00 |
|            | EastNY   | 7.00           | 93.00 |
|            | SJamaica | 42.00          | 58.00 |
|            | SBronx   | 10.00          | 90.00 |
#+END_SRC


*** graph
#+RESULTS: seen_any_image
[[file:seen_any_image.jpeg]]

** Outreach
*** code
#+name: know_any_employee
#+header: :quality 100
#+BEGIN_SRC R :file know_any_employee.jpeg :results graphics :export both :session nyc 
pIdx <- 90+2*(0:7)

for(i in pIdx) {
    print(table(as.numeric(df[,i])))
      }

RknowsP_data <- rep(-1,nrow(df))
RknowsP1 <- as.numeric(df[,'RknowsP1'])==2
RknowsP2 <- as.numeric(df[,'RknowsP2'])==2
RknowsP3 <- as.numeric(df[,'RknowsP3'])==2
RknowsP4 <- as.numeric(df[,'RknowsP4'])==2
RknowsP5 <- as.numeric(df[,'RknowsP5'])==2
RknowsP6 <- as.numeric(df[,'RknowsP6'])==2
RknowsP7 <- as.numeric(df[,'RknowsP7'])==2
RknowsP8 <- as.numeric(df[,'RknowsP8'])==2


RknowsP_data[RknowsP1 | RknowsP2 | RknowsP3 | RknowsP4 | RknowsP5 | RknowsP6 | RknowsP7 | RknowsP8] <- 2
RknowsP_data[!RknowsP1 & !RknowsP2 & !RknowsP3 & !RknowsP4 & !RknowsP5 & !RknowsP6 & !RknowsP7 & !RknowsP8] <- 1

AnyRknowsP <- factor(RknowsP_data,levels = 1:2,labels = c("No","Yes"),ordered = TRUE)

tAnyRknowsP <- round(100*prop.table(table(AnyRknowsP)),0)
barplot(tAnyRknowsP,main = "Percentage of Respondents that know a program employee", col="steel blue")
#+END_SRC
#+name: calc_knows_any_employee_by_neighborhood
#+BEGIN_SRC R  :results silent :export code :session nyc 
  tAnyRknowsPNeighb <- table(location,AnyRknowsP)
  tKnowsAnybodyNeighb <- round(100*prop.table(tAnyRknowsPNeighb,1),0)
  t1 <- "Knows any employee by neighborhood"
  b <- ascii(tKnowsAnybodyNeighb,include.rownames = TRUE,include.colnames = TRUE,caption=t1)
#+END_SRC


#+name: print_knows_any_employee_by_neighborhood
#+BEGIN_SRC R  :results output org :export both :session nyc 
print(b,type="org")
#+END_SRC

#+RESULTS: print_knows_any_employee_by_neighborhood
#+BEGIN_SRC org
,#+CAPTION: Knows any employee by neighborhood
|            |          | *AnyRknowsP* |        |
|            |          | No           | Yes    |
|------------+----------+--------------|--------|
| *location* | Harlem   | 47.00        | 53.00  |
|            | EastNY   | 0.00         | 100.00 |
|            | SJamaica | 1.00         | 99.00  |
|            | SBronx   | 1.00         | 99.00  |
#+END_SRC


*** graph
#+RESULTS: know_any_employee
[[file:know_any_employee.jpeg]]

** Communication
*** code
#+name: comm_any_employee
#+header: :quality 100
#+BEGIN_SRC R :file comm_any_employee.jpeg :results graphics :export both :session nyc 
cIdx <- 91+2*(0:7)

for(i in cIdx) {
    print(table(as.numeric(df[,i])))
      }

RcommP_data <- rep(-1,nrow(df))
RcommP1 <- as.numeric(df[,'RcommP1L12mo'])==3
RcommP2 <- as.numeric(df[,'RcommP2L12mo'])==3
RcommP3 <- as.numeric(df[,'RcommP3L12mo'])==3
RcommP4 <- as.numeric(df[,'RcommP4L12mo'])==3
RcommP5 <- as.numeric(df[,'RcommP5L12mo'])==3
RcommP6 <- as.numeric(df[,'RcommP6L12mo'])==3
RcommP7 <- as.numeric(df[,'RcommP7L12mo'])==3
RcommP8 <- as.numeric(df[,'RcommP8L12mo'])==3


RcommP_data[RcommP1 | RcommP2 | RcommP3 | RcommP4 | RcommP5 | RcommP6 | RcommP7 | RcommP8] <- 2
RcommP_data[!RcommP1 & !RcommP2 & !RcommP3 & !RcommP4 & !RcommP5 & !RcommP6 & !RcommP7 & !RcommP8] <- 1

AnyRcommP <- factor(RcommP_data,levels = 1:2,labels = c("No","Yes"),ordered = TRUE)

tAnyRcommP <- round(100*prop.table(table(AnyRcommP)),0)
barplot(tAnyRcommP,main = "Pct of Resp that speak regularly to an employee", col="steel blue")
#+END_SRC

#+name: calc_communicates_any_employee_by_neighborhood
#+BEGIN_SRC R  :results silent :export code :session nyc 
  tAnyRcommPNeighb <- table(location,AnyRcommP)
  tcommAnybodyNeighb <- round(100*prop.table(tAnyRcommPNeighb,1),0)
  t1 <- "Communicates with any employee by neighborhood"
  b <- ascii(tcommAnybodyNeighb,include.rownames = TRUE,include.colnames = TRUE,caption=t1)
#+END_SRC


#+name: print_communicates_any_employee_by_neighborhood
#+BEGIN_SRC R  :results output org :export both :session nyc 
print(b,type="org")
#+END_SRC

#+RESULTS: print_communicates_any_employee_by_neighborhood
#+BEGIN_SRC org
,#+CAPTION: Communicates with any employee by neighborhood
|            |          | *AnyRcommP* |       |
|            |          | No          | Yes   |
|------------+----------+-------------|-------|
| *location* | Harlem   | 88.00       | 12.00 |
|            | EastNY   | 86.00       | 14.00 |
|            | SJamaica | 90.00       | 10.00 |
|            | SBronx   | 92.00       | 8.00  |
#+END_SRC


*** graph
#+RESULTS: comm_any_employee
[[file:comm_any_employee.jpeg]]

** Attended an anti-violence rally 
*** code
#+name: AttendAVrallyL12mo
#+header: :quality 100
#+BEGIN_SRC R :file AttendAVrallyL12mo.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  AttendAVrallyL12mo <- df[,'AttendAVrallyL12mo']

  AttendAVrallyL12mo_data <- rep(-1,nR)

  AttendAVrallyL12mo_data[is.na(AttendAVrallyL12mo)] <- NA
  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==1] <-1
  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==2] <- 2
  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==3] <- 2     
  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==4] <- 2

  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==5] <- 2
  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==6] <- 2    
  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==7] <- 2
  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==8] <- 2

  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==9] <- 2
  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==10] <- 2
  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==11] <- 2
  AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==12] <- 2
AttendAVrallyL12mo_data[as.numeric(AttendAVrallyL12mo)==13] <- NA


  AttendAVrallyL12mof <- factor(AttendAVrallyL12mo_data,levels = 1:2,
                           labels=c("No","Yes"), ordered=TRUE)


  AttendAVrallyL12moTtl <- table(AttendAVrallyL12mof)
  AttendAVrallyL12moPct <- round(100*prop.table(AttendAVrallyL12moTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(AttendAVrallyL12moPct, 
main="Percent attended an anti-violence rally",
col = "steel blue")

  #dev.off()
#+end_src


#+name: calc_attended_antiviolence_rally_by_neighborhood
#+BEGIN_SRC R  :results silent :export code :session nyc 
  tAttendAVrallyL12mofNeighb <- table(location,  AttendAVrallyL12mof)
  tAttendAVrallyL12mofNeighb <- round(100*prop.table(tAttendAVrallyL12mofNeighb,1),0)
  t1 <- "Attended an anti-violence rally by neighborhood"
  b <- ascii(tAttendAVrallyL12mofNeighb,include.rownames = TRUE,include.colnames = TRUE,caption=t1)
#+END_SRC


#+name: print_attended_antiviolence_rally_by_neighborhood
#+BEGIN_SRC R  :results output org :export both :session nyc 
print(b,type="org")
#+END_SRC

#+RESULTS: print_attended_antiviolence_rally_by_neighborhood
#+BEGIN_SRC org
,#+CAPTION: Attended an anti-violence rally by neighborhood
|            |          | *AttendAVrallyL12mof* |       |
|            |          | No                    | Yes   |
|------------+----------+-----------------------|-------|
| *location* | Harlem   | 61.00                 | 39.00 |
|            | EastNY   | 70.00                 | 30.00 |
|            | SJamaica | 76.00                 | 24.00 |
|            | SBronx   | 82.00                 | 18.00 |
#+END_SRC


*** graph
#+RESULTS: AttendAVrallyL12mo
[[file:AttendAVrallyL12mo.jpeg]]

* Demographics




** Respondent age
*** code
#+name: age
#+header: :quality 100
#+BEGIN_SRC R :file age.jpeg :results graphics :export both :session nyc 
age <- as.numeric(levels(df$age)[as.numeric(df$age)])

pctAge <- prop.table(table(age))

pctAgeP <- round(100*pctAge,0)
barplot(pctAgeP,main = "Pct of respondents at each age", col="steel blue")
#+END_SRC
*** graph
#+RESULTS: age
[[file:age.jpeg]]
** Respondent education completed
*** code 
#+name: education
#+header: :quality 100
#+BEGIN_SRC R :file education.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  EdCompleted <- df[,'EdCompleted']

  EdCompleted_data <- rep(-1,nR)

  EdCompleted_data[is.na(EdCompleted)] <- NA
  EdCompleted_data[as.numeric(EdCompleted)==1] <-4
  EdCompleted_data[as.numeric(EdCompleted)==2] <- 5
  EdCompleted_data[as.numeric(EdCompleted)==3] <- 2     
  EdCompleted_data[as.numeric(EdCompleted)==4] <- 4

  EdCompleted_data[as.numeric(EdCompleted)==5] <- 2
  EdCompleted_data[as.numeric(EdCompleted)==6] <- 3    
  EdCompleted_data[as.numeric(EdCompleted)==7] <- 4
  EdCompleted_data[as.numeric(EdCompleted)==8] <- 1

  EdCompleted_data[as.numeric(EdCompleted)==9] <- 2
  EdCompleted_data[as.numeric(EdCompleted)==10] <- NA
  EdCompleted_data[as.numeric(EdCompleted)==11] <- 3
  EdCompleted_data[as.numeric(EdCompleted)==12] <- 3
EdCompleted_data[as.numeric(EdCompleted)==13] <- 4


  EdCompletedf <- factor(EdCompleted_data,levels = 1:5,
                           labels=c("lt-hs","ged","some-coll",
                               "Assoc","BA+"), ordered=TRUE)


  EdCompletedTtl <- table(EdCompletedf)
  EdCompletedPct <- round(100*prop.table(EdCompletedTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(EdCompletedPct, 
main="Education completed percentage sample",
col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: education
[[file:education.jpeg]]

** Respondent is in school
*** code
#+name: inSchool
#+header: :quality 100
#+BEGIN_SRC R :file inSchool.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  inSchool <- df[,'inSchool']

  inSchool_data <- rep(-1,nR)

  inSchool_data[is.na(inSchool)] <- NA
  inSchool_data[as.numeric(inSchool)==1] <-NA
  inSchool_data[as.numeric(inSchool)==2] <- 1
  inSchool_data[as.numeric(inSchool)==3] <- 2     


  inSchoolf <- factor(inSchool_data,levels = 1:2,
                           labels=c("No","Yes"),ordered=TRUE)


  inSchoolTtl <- table(inSchoolf)
  inSchoolPct <- round(100*prop.table(inSchoolTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(inSchoolPct, 
main="Respondent is in school percentage sample",
col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: inSchool
[[file:inSchool.jpeg]]

** Respondent employment
*** code
#+name: employed
#+header: :quality 100
#+BEGIN_SRC R :file employed.jpeg :results graphics :export both :session nyc 
  nR <- nrow(df)
  employed <- df[,'employed']

  employed_data <- rep(-1,nR)

  employed_data[is.na(employed)] <- NA
  employed_data[as.numeric(employed)==1] <- NA
  employed_data[as.numeric(employed)==2] <- 3
  employed_data[as.numeric(employed)==3] <- NA     
  employed_data[as.numeric(employed)==4] <- 2

  employed_data[as.numeric(employed)==5] <- 1


  employedf <- factor(employed_data,levels = 1:3,
                           labels=c("unemployed","part-time","full-time"), ordered=TRUE)


  employedTtl <- table(employedf)
  employedPct <- round(100*prop.table(employedTtl),0)
  #jpeg("resp_marginals/ctOnPol.jpg")

  barplot(employedPct, 
main="Employment status percentage sample",
col = "steel blue")

  #dev.off()
#+end_src

#+RESULTS: employed
[[file:employed.jpeg]]

** Respondent mobility
*** code
#+name: timeOutside
#+header: :quality 100
#+BEGIN_SRC R :file timeOutside.jpeg :results graphics :export both :session nyc 
timeOutside <- as.numeric(levels(df$TimeOutsideHere)[as.numeric(df$TimeOutsideHere)])

pctTimeOutside <- round(100*prop.table(table(timeOutside)),0)

  barplot(pctTimeOutside, 
main="Respondent time outside the nighborhood percentage sample",
col = "steel blue")

  #dev.off()
#+end_src
*** graph
#+RESULTS: timeOutside
[[file:timeOutside.jpeg]]
** Respondent sleep time
*** code
#+name: sleepTime
#+header: :quality 100
#+BEGIN_SRC R :file sleepTime.jpeg :results graphics :export both :session nyc 
sleepTimeC <- gsub("M ","M",gsub("  ","",levels(df$sleepTime)))


sleepData=rep(-1,nR)
sleepData[sleepTimeC=="11 AM"] <- 6
sleepData[sleepTimeC=="12 PM (Noon)"] <- 6
sleepData[sleepTimeC=="1 PM"] <- 6
sleepData[sleepTimeC=="2 PM"] <- 7            
sleepData[sleepTimeC=="3 PM"] <- 7
sleepData[sleepTimeC=="4 PM"] <- 7
sleepData[sleepTimeC=="5 PM"] <- 8           
sleepData[sleepTimeC=="6 PM"] <- 8
sleepData[sleepTimeC=="7 PM"] <- 8
sleepData[sleepTimeC=="8 PM"] <- 1
sleepData[sleepTimeC=="9 PM"] <- 1
sleepData[sleepTimeC=="10 PM"] <- 1
sleepData[sleepTimeC=="11 PM"] <- 2
sleepData[sleepTimeC=="12 AM (Midnight)"] <- 2
sleepData[sleepTimeC=="1 AM"] <- 2
sleepData[sleepTimeC=="2 AM"] <- 3
sleepData[sleepTimeC=="3 AM"] <- 3            
sleepData[sleepTimeC=="4 AM"] <- 3
sleepData[sleepTimeC=="5 AM"] <- 4
sleepData[sleepTimeC=="6 AM"] <- 4
sleepData[sleepTimeC=="7 AM"] <- 4
sleepData[sleepTimeC=="8 AM"] <- 5
sleepData[sleepTimeC=="9 AM"] <- 5
sleepData[sleepTimeC=="10 AM"] <- 5


sleepLabels <- c("e-night","l-night",
                 "e-mor","l-mor",
                 "e-after","l-after",
                 "e-eve","l-eve"
                 )

                 
sleep <- factor(sleepData,levels = 1:8,labels = sleepLabels,ordered = TRUE)

counts <- round(100*prop.table(table(sleep)),0)
barplot(counts, main="Sleep Time",col="steel blue")
#+END_SRC
*** graphs
#+RESULTS: sleepTime
[[file:sleepTime.jpeg]]

* Respondent violence score
*** code

#+name: setRscore
#+header: :quality 100
#+BEGIN_SRC R :file rScore.csv :results org :export both :session nyc 
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
newLevelsIdx <- (1:nrow(df))[as.numeric(location)==4]
dfbx <- df[381:580,23:38]
dfnbx <- data.frame(matrix(-1,nrow=nrow(df),ncol=16))
colnames(dfnbx) <- colnames(dfbx)

    
for(j in 1:ncol(dfbx)) {
    dfbx[,j] <- levels(dfbx[,j])[as.numeric(dfbx[,j])]
    dfbx[dfbx[,j]=="1(Ignore)       ",j] <- 1
    dfbx[dfbx[,j]=="2               ",j] <- 1              
    dfbx[dfbx[,j]=="3 (React verball",j] <- 2
    dfbx[dfbx[,j]=="4               ",j] <- 2
    dfbx[dfbx[,j]=="5 (Get Physical)",j] <- 3
    dfbx[dfbx[,j]=="6               ",j] <- 3
    dfbx[dfbx[,j]=="7 (Pull a weapon",j] <- 4
    dfbx[dfbx[,j]=="8               ",j] <- 4
    dfbx[dfbx[,j]=="9 (Use a weapon)",j] <- 5
    dfbx[dfbx[,j]=="10              ",j] <- 5
    dfbx[dfbx[,j]=="11 (Not sure/Dec",j] <- 6

    dfbx[dfbx[,j]=="1(Ignore)     ",j] <- 1
    dfbx[dfbx[,j]=="2             ",j] <- 1              
    dfbx[dfbx[,j]=="3 (React verba",j] <- 2
    dfbx[dfbx[,j]=="4             ",j] <- 2
    dfbx[dfbx[,j]=="5 (Get Physica",j] <- 3
    dfbx[dfbx[,j]=="6             ",j] <- 3
    dfbx[dfbx[,j]=="7 (Pull a weap",j] <- 4
    dfbx[dfbx[,j]=="8             ",j] <- 4
    dfbx[dfbx[,j]=="9 (Use a weapo",j] <- 5
    dfbx[dfbx[,j]=="10            ",j] <- 5
    dfbx[dfbx[,j]=="11 (Not sure/D",j] <- 6

    dfbx[,j] <- as.numeric(dfbx[,j])
}

#assign
rscore <- list()
#rscore.h <- list()
#rscore.e  <- list()
rscorer <- list()
scenarios <- list()
pctDecline <- list()
counts <- list()
#counts.h <- list()
#counts.e <- list()
pctRDecline <- list()
subt <- list()

## for(j in 23:38) {
##     scenarios[[varNames[j]]] <- rep(-1,nR)
##     rscore[[varNames[j]]] <- -1
##     rscorer[[varNames[j]]] <- -1
##     pctRDecline[[varNames[j]]] <- -1
##     counts[[varNames[j]]] <- rep(-1,nR)
##     subt[[varNames[j]]] <- -1
##     scenarios[[varNames[j]]] <- rep(-1,nR)
##     cat(class(df[,j]),"\n",sep="")
## }



for(j in (23:38)) {
    
    dfnbx[,j-22]["Ignore"==trim(levels(df[,j])[df[,j]])] <- 1
    dfnbx[,j-22]["React verbally"==trim(levels(df[,j])[df[,j]])] <- 2
    dfnbx[,j-22]["Get Physical"==trim(levels(df[,j])[df[,j]])] <- 3
    dfnbx[,j-22]["Pull a weapon"==trim(levels(df[,j])[df[,j]])] <- 4
    dfnbx[,j-22]["Use a weapon"==trim(levels(df[,j])[df[,j]])] <- 5
    dfnbx[,j-22]["Not sure/Decline"==trim(levels(df[,j])[df[,j]])] <- 6
}

dfnbx[381:580,] <-dfbx
rscore <- list()
#rscore.h <- list()
#rscore.e  <- list()
rscorer <- list()
scenarios <- list()
pctDecline <- list()
counts <- list()
#counts.h <- list()
#counts.e <- list()
pctRDecline <- list()
subt <- list()

for(j in (23:38)) {
    rscorer[[j-22]] <- median(dfnbx[,j-22][dfnbx[,j-22]!=6],na.rm = TRUE)
    rscore[[j-22]]  <- mean(dfnbx[,j-22][dfnbx[,j-22]!=6],na.rm = TRUE)

    pctRDecline[[j-22]] <- round(sum(dfnbx[,j-22]==6)/length(dfnbx[,j-22]),2)

dfnbx[,j-22] <- factor(dfnbx[,j-22],
                          levels = 1:6,
                          labels = c(
                              "Ignore",
                              "VReact",
                              "PReact",
                              "DWeapon",
                              "UWeapon",
                              "Decline"
                              ),ordered=TRUE)
    counts[[j-22]] <- table(dfnbx[,j-22])
#    counts.h[[j-22]]<- table(dfnbx[[j-22]][df$location=="Harlem"])
#    counts.e[[j-22]]<- table(dfnbx[[j-22]][df$location=="EastNY"])
}
#+END_SRC

#+RESULTS: setRscore
#+BEGIN_SRC org
[[file:rScore.csv]]
#+END_SRC

#+name: respVioIndex
#+header: :quality 100
#+BEGIN_SRC R :file respVioIndex.csv :results org :export both :session nyc 
create_scenario_df <- function(df,dfnbx)
    {
        ddf<-data.frame(obs=1:nrow(df))
        ddf$RFightPartyNotHere <- dfnbx$RFightPartyNotHere   
        ddf$RBrothersAttacker <- dfnbx$RBrothersAttacker    
        ddf$RBumpSwingNotHere <- dfnbx$RBumpSwingNotHere    
        ddf$RRriendAttacked <- dfnbx$RFriendAttacked      
        ddf$RStolenJacketPublic <- dfnbx$RStolenJacketPublic  

        ddf$ROwedMoneyPlayed <- dfnbx$ROwedMoneyPlayed     
        ddf$RMoneyOwed <- dfnbx$RMoneyOwed           
        ddf$RBetWelch <- dfnbx$RBetWelch            
        ddf$RPublicDis <- dfnbx$RPublicDis           
        ddf$RBodegaCheat <- dfnbx$RBodegaCheat         

        ddf$RBasketball <- dfnbx$RBasketball          
        ddf$RJordans <- dfnbx$RJordans             
        ddf$RSocialMedia <- dfnbx$RSocialMedia         
        ddf$RexGirlPlayed <- dfnbx$RexGirlPlayed        
        ddf$RGirlClaim <- dfnbx$RGirlClaim           
        ddf$RGirlsNewG <- dfnbx$RGirlsNewG           
        ddf <- ddf[,2:17]
        respWeight <- matrix(-1,nrow=nrow(ddf),ncol=16)
        resp <-matrix(-1,nrow=nrow(ddf),ncol=16)        
        for(j in 1:16) {
            resp[,j] <- as.numeric(ddf[,j])

        }

        for(j in 1:16) {
            respWeight[ is.na(resp[,j]) | resp[,j] == 6,j] <- 0
            respWeight[!is.na(resp[,j]) & resp[,j] < 6,j] <- 1

    }
        
        validRespCount <- apply(respWeight,1,sum)


        respVioIndex <- rep(NA,nrow(ddf))

        
        respVioIndex[validRespCount!=0] <- apply((resp[validRespCount!=0,]
                         * respWeight[validRespCount!=0,] *
                         matrix(rep(1/validRespCount[validRespCount!=0],16),
                                ncol = 16, byrow = FALSE)),1,sum)


        ddf$validRespCount <- validRespCount
        ddf$respVioIndex <- respVioIndex
        return(ddf)
}
ddf<-create_scenario_df(df,dfnbx)
#+END_SRC

#+RESULTS: respVioIndex
#+BEGIN_SRC org
[[file:respVioIndex.csv]]
#+END_SRC

#+name: vio_score
#+header: :quality 100
#+BEGIN_SRC R :file vio_score.jpeg :results graphics :export both :session nyc 
hist(respVioInd
ex,main="Distribution of respondent violence scores",col="steel blue")
#+END_SRC

#+RESULTS: vio_score
[[file:vio_score.jpeg]]


* Network
** Respondent coupon
** Respondent referrals
** Interviewer
** Time in interview
* Catchment violence indicies

* Research Questions
** Describe Sample, Age, Gender, Education, Employment
** Is victimization associated with higher violent ideation?
** Is employment associated with lower violent ideation?
** Is age associated with violent ideation?
** Is lower civil trust associated with violent ideation?
** Is lower collective efficacy associated with violent ideation?
** Are perceptions of safety associated with lower violent ideation?
** Are perceptions of gang prevelance associated with higher violent ideation?
** Is a low age at death, associated with higher violent ideation?
** How much of the variation in violent ideation can we explain?

** RDS homophily on violence

* Nice Pedestrian overview
* Move them to factors and construct
